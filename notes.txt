Python:
>> It is a high-level, interpreted, general-purpose programming language.
>> Dynamically Typed Language.

human written code ---> machine code (00 1110001)

Compilation---> translates entire code into machine code and executes it.
Ex: Java, C, C++
interpretation --> executes the program line by line
Ex: python

Print
-------
>> It is used to print a data at the output.
print(data)

Input  (always return a string)
------
>> To prompt data from user.
input("String")

>> Extension of a python file ---> .py 
command to execute a python file ---> python filename.py

Basic Syntax:
-------------
>> Case-sensitive (a is not A)
>> Indentation is must (Indentation defines block of code).

Comments 
----------
Single line --> # 
Multiline --> '''  content '''

Datatypes 
----------
Integer --> Whole Number --> -1,-22,0,1,2,3
Float --> Decimal Number -> 1.1, 3.4
String --> Collection of characters wrapped with either '' or "".
ex: Hello, Hi
Concatination --> attaching multiple strings together using +.
str1+str2---> str1str2.
Boolean --> True, False

Variables 
----------
It stores data in memory with a name.
varName=""

naming rules 
--------------
>> case sensitive
>> variable name should start with letter or '_'
>> variable name can contain numbers
>> should not use reserved keywords.
>> it cannot contain white spaces.

Type casting 
-------------
>> Converts Datatype into another.

int(obj) --> convert into Integer
str(obj)
float(obj)
bool(obj)

Opearators 
-----------
>> These are symbols that perform opearations on values.

2 * 4 = 8

* ---> operator
2,4 --> operands 

Arithmetic Operators (numeric values)
----------------------
+ --> addition
- --> subtraction
* --> multiplication
/ --> division
// --> Floor division
% --> mod (reminder)
** ---> Exponent (power)
BODMAS --> Bracket OF(Order) DIV MUL ADD SUB

Comparison Operators (Boolean)
----------------------
== -> equal
!= -> not equal
< --> lesser than
> --> greater than
<= --> lesser than or equal
>= --> greater than or equal

Logical Operators (Boolean)
-----------------
AND --> and --> when both are True
OR  --> or  --> when any one is True
NOT --> not --> invert the boolean

bool1    bool2    AND    OR 
True     True     True   True
False    True     False  True
True     False    False  True
False    False    False  False

Assignment Operator 
--------------------
= --> equal to (assign a value to variable)
+= --> add and assign
-= --> sub and assign
*= --> mul and assign
/= --> div and assign
//= -->floor div and assign
%= --> mod and assign
**= --> expo and assign

Bitwise Operator
-----------------
AND --> & --> performs and operation between bits.
OR --> | performs or operation between bits
NOT --> ~ performs not operation with bits.(~n=-(n+1))
X-OR --> ^ 
right shift --> >> move the bits towards right for specified positions
left shift --> << move the bits towards left for specified positions

Indexing and Slicing 
----------------------
Indexing ---> Accessing one of the members of an object using the index number.
Ex: String, List, Tuple, dict.
a="Hello world!" --> starts with 0
a[5]=" "


Control flow
--------------
Conditional Cluase
--------------------
>> using Conditional Cluase we can make python to take decision according to the given condition.

if condition:
    block of code
>> this block of code will be executed, when the condition is True.

elif condition:
    block of code 
>> this block of code will be executed, when the condition is True.

else:
    block of code 
executed --> when if block condition is False.

Nested If block
----------------
if cond1:
    if cond2:
        block of code

Loops 
------
>> It is a programming construct that allows a block of code to run repeatedly.

While Loop
----------
>> Iteration count is not known
Syntax 
---------
while condition:
    block of code

executes the code over and over again as long as the condition stays True.

For loop 
--------
>> when iteration count is known
>> It iterates over a sequence(Iterable Object).
Syntax:
for var in iterObj:
    block of code 
Range method --> Top create temporary iterable object 
range(end) --> ex: range(100) --> [0,1,2,3,.......99]
range(start,end) --> ex: range(1,10) -->[1,2,3,4...9]
range(start,end,step(1)) --> ex: range(1,10,4)-->
[1,5,9]

Control Statements
-------------------
Break ---> Stops a loop
Continue ---> Skips the current iteration

1-200
div by 3--> skip 
div by 5--> skip 
div by both(3,5) --> "buzz"
1,2,4,7,8,11,13,14,"buzz",16,17,19,22,23,26,28,29,"buzz"..................200

Data Structures
---------------
It is an organized way to store, manage and retrive data efficiently.

List (sequence)
----
syntax ---> [ele1, ele2, ele3....]
>> Ordered, Mutable and it allows duplicate.

In built methods
------------------
.append(ele) --> adds element at the end of list
.extend([ele,ele..]) --> at the end
.insert(pos, ele) --> adds ele at specified position
.remove(ele) --> removes element from the list.(first occurance)
.pop(ind) ---> removes element by it's index

.index(ele) --> finds index number. (first occurance)
.count(ele)  --> number of occurances of an element in a list.

.sort() ---> arranges list in ascending order.
.reverse() --> reverse a list

Tuple  (sequence)
------
Syntax --> (ele,ele.....)
It is ordered, immutable and allows duplicate.

in built methods 
----------------
.index(ele) --> finds index number. (first occurance)
.count(ele)  --> number of occurances of an element in a list.

packing/unpacking 
------------------
person1=("allen",6)
name,age=person1

Set 
------
syntax --> {ele,ele......}
>> Unordered, immutable and it will not allow duplicates.

in built methods 
-----------------
.union(set) ---> union elements
.intersection(set) ---> common elements
.defference(set)  --> difference